name: Provision AD User & Store in Akeyless

on:
  workflow_dispatch:

permissions:
  id-token: write  # Required for JWT authentication
  contents: read   # Allows access to repo contents

jobs:
  provision_ad_user:
    runs-on: ubuntu-latest

    steps:
      - name: Set Requester Email
        run: |
          echo "REQUESTER_EMAIL=netser.h@akeyless.io" >> $GITHUB_ENV
          
      - name: Fetch LDAP Dynamic Secret from Akeyless
        id: fetch_ldap_secret
        uses: akeyless-community/akeyless-github-action@v1.1.2
        with:
          access-id: ${{ vars.AKEYLESS_ACCESS_ID }}
          access-type: jwt
          api-url: "https://api.akeyless.io"
          dynamic-secrets: |
            - name: "/CS/Azure/Domain-akeyless.site/LDAP/LDAP-temp-domain-user-AD"
              output-name: "ldap_secret"

      # Export Dynamic Secret's keys to env vars
      - name: Export LDAP DS json keys (creds) to Env variables
        run: |
          echo '${{ steps.fetch_ldap_secret.outputs.ldap_secret }}' | jq -r 'to_entries|map("LDAP_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' | while read -r line; do
            key=$(echo "$line" | cut -d= -f1)
            value=$(echo "$line" | cut -d= -f2-)
            echo "::add-mask::$value"  # Mask the secret value in logs
            echo "$line" >> $GITHUB_ENV
          done

      - name: Install Akeyless CLI
        run: |
          curl -o akeyless https://akeyless-cli.s3.us-east-2.amazonaws.com/cli/latest/production/cli-linux-amd64
          chmod +x akeyless
          ./akeyless --init

      - name: Housekeeping - Delete Existing Rotated Secret (if exists)
        run: |
          ./akeyless delete-item -n "/demo/shared_with_me/${{ env.REQUESTER_EMAIL }}/LMS_credential" --token "${{ steps.fetch_ldap_secret.outputs.token }}" || true

      - name: Store LDAP Credentials in Akeyless as a Rotated Secret (Manual Mode)
        run: |
          ./akeyless rotated-secret create ldap \
          --name "/demo/shared_with_me/${{ env.REQUESTER_EMAIL }}/LMS_credential" \
          --gateway-url "https://conf.nh.cs.akeyless.fans" \
          --target-name "/CS/Azure/LDAP/AD-ldap-sandbox-akeyless-site" \
          --authentication-credentials "use-target-creds" \
          --password-length 16 \
          --rotator-type "ldap" \
          --rotated-username "${{ env.LDAP_USER }}" \
          --rotated-password "${{ env.LDAP_PASSWORD }}" \
          --user-attribute "sAMAccountName" \
          --user-dn "CN=\"${{ env.LDAP_USER }}\",OU=netser,DC=akeyless,DC=site" \
          --token "${{ steps.fetch_ldap_secret.outputs.token }}" \
          --auto-rotate "false"

      - name: Output Stored Secret Path
        run: |
          echo "âœ… Stored Secret Path: /demo/shared_with_me/${{ env.REQUESTER_EMAIL }}/LMS_credential"

      - name: Send Email Notification to Requester
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ vars.SMTP_SERVER }}
          server_port: ${{ vars.SMTP_PORT }}
          username: ${{ vars.SMTP_USERNAME }}
          password: ${{ vars.SMTP_PASSWORD }}
          subject: "LMS User Creation Status"
          to: "${{ env.REQUESTER_EMAIL }}"
          from: "no-reply@yourdomain.com"
          body: |
            Dear ${{ env.REQUESTER_EMAIL }},

            The LMS User has been successfully created. Kindly check the Akeyless Vault details below to access the user password.

            **Request Type:** LMS User  
            **Requestor:** ${{ env.REQUESTER_EMAIL }}  
            **Status:** **User successfully created**  
            **SamAccountName:** ${{ env.LDAP_USER }}  
            **User DN:** CN=${{ env.LDAP_USER }},OU=netser,DC=akeyless,DC=site  
            **Secret Name:** /demo/shared_with_me/${{ env.REQUESTER_EMAIL }}/LMS_credential  
            **Vault URL:** [Click here to securely access your credentials](https://auth.akeyless.io/oidc-login?access_id=p-fjcjzsyhc7mp&redirect_uri=https%3A%2F%2Fconsole.akeyless.io%2Flogin-oidc&is_short_token=true)  

            Note: Click on the Vault URL to securely retrieve the user password from Akeyless. Authentication via **SSO with Entra ID** is required.

            **Thanks,**  
            **Automation Team**
        content_type: text/html
